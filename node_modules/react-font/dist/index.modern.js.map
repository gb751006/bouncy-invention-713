{"version":3,"file":"index.modern.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\nimport WebFont from 'webfontloader'\n\ninterface Props extends LoaderProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst Font = (props: Props): JSX.Element => {\n  return (\n    <div style={styleGen(props)}>\n      <FontLoader {...props} />\n      {props.children}\n    </div>\n  )\n}\n\ninterface TextProps extends LoaderProps {\n  children: string\n}\n\nexport const Text = (\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLParagraphElement>,\n    HTMLParagraphElement\n  > &\n    TextProps\n): JSX.Element => {\n  return (\n    <p\n      {...{\n        ...Object.keys(props).reduce((object, key) => {\n          if (\n            ![\n              'family',\n              'italic',\n              'weight',\n              'onLoad',\n              'onError',\n              'onAllLoad',\n              'onAllError'\n            ].includes(key)\n          ) {\n            object[key] = props[key]\n          }\n          return object\n        }, {})\n      }} // pass props but remove font props\n      style={{ ...styleGen(props), ...props.style }} // combine the font style and any custom style from props\n    >\n      <FontLoader {...props} text={props.children} />\n      {props.children}\n    </p>\n  )\n}\n\ninterface LoaderProps extends FontProps {\n  provider?: string\n  onLoad?: (family: string, style: string) => void\n  onError?: (family: string, style: string) => void\n  onAllLoad?: () => void\n  onAllError?: () => void\n  text?: string\n}\n\nexport const FontLoader = ({\n  family,\n  weight = 400,\n  italic = false,\n  provider = 'google',\n  onLoad = () => {},\n  onError = () => {},\n  onAllLoad = () => {},\n  onAllError = () => {},\n  text = undefined\n}: LoaderProps): JSX.Element | null => {\n  useEffect(() => {\n    const WebFontConfig: WebFont.Config = {\n      classes: false,\n      fontactive: onLoad,\n      fontinactive: onError,\n      active: onAllLoad,\n      inactive: onAllError\n    }\n\n    if (provider === 'google') {\n      const fontFamily = GoogleFont({\n        family,\n        weight,\n        italic\n      })\n      WebFontConfig.google = {\n        families: [fontFamily],\n        text\n      }\n    } else if (provider === 'local') {\n      WebFontConfig.custom = {\n        families: [family]\n      }\n    }\n\n    WebFont.load(WebFontConfig)\n  }, [family, weight, italic, provider, onLoad, onError])\n\n  return null\n}\n\nconst GoogleFont = ({ family, weight = 400, italic = false }: FontProps) => {\n  let encodedURL = encodeURIComponent(family)\n\n  if (weight !== 400 && italic) {\n    encodedURL += `:bi`\n  } else if (weight !== 400) {\n    encodedURL += `:${weight}`\n  } else if (italic) {\n    encodedURL += `:i`\n  }\n\n  return encodedURL\n}\n\ninterface FontProps {\n  family: string\n  weight?: number\n  italic?: boolean\n}\n\nconst styleGen = ({ family, italic, weight }: FontProps) => {\n  return {\n    fontFamily: `'${family}'`,\n    fontStyle: italic ? 'italic' : undefined,\n    fontWeight: weight\n  }\n}\n\nexport default Font\n"],"names":["Font","props","React","style","styleGen","FontLoader","children","Text","Object","keys","reduce","object","key","includes","text","family","weight","italic","provider","onLoad","onError","onAllLoad","onAllError","undefined","useEffect","WebFontConfig","classes","fontactive","fontinactive","active","inactive","fontFamily","GoogleFont","google","families","custom","WebFont","load","encodedURL","encodeURIComponent","fontStyle","fontWeight"],"mappings":"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"}