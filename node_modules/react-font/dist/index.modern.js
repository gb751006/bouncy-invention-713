import React, { useEffect } from 'react';
import WebFont from 'webfontloader';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Font = function Font(props) {
  return React.createElement("div", {
    style: styleGen(props)
  }, React.createElement(FontLoader, Object.assign({}, props)), props.children);
};

var Text = function Text(props) {
  return React.createElement("p", Object.assign({}, _extends({}, Object.keys(props).reduce(function (object, key) {
    if (!['family', 'italic', 'weight', 'onLoad', 'onError', 'onAllLoad', 'onAllError'].includes(key)) {
      object[key] = props[key];
    }

    return object;
  }, {})), {
    style: _extends({}, styleGen(props), props.style)
  }), React.createElement(FontLoader, Object.assign({}, props, {
    text: props.children
  })), props.children);
};
var FontLoader = function FontLoader(_ref) {
  var family = _ref.family,
      _ref$weight = _ref.weight,
      weight = _ref$weight === void 0 ? 400 : _ref$weight,
      _ref$italic = _ref.italic,
      italic = _ref$italic === void 0 ? false : _ref$italic,
      _ref$provider = _ref.provider,
      provider = _ref$provider === void 0 ? 'google' : _ref$provider,
      _ref$onLoad = _ref.onLoad,
      onLoad = _ref$onLoad === void 0 ? function () {} : _ref$onLoad,
      _ref$onError = _ref.onError,
      onError = _ref$onError === void 0 ? function () {} : _ref$onError,
      _ref$onAllLoad = _ref.onAllLoad,
      onAllLoad = _ref$onAllLoad === void 0 ? function () {} : _ref$onAllLoad,
      _ref$onAllError = _ref.onAllError,
      onAllError = _ref$onAllError === void 0 ? function () {} : _ref$onAllError,
      _ref$text = _ref.text,
      text = _ref$text === void 0 ? undefined : _ref$text;
  useEffect(function () {
    var WebFontConfig = {
      classes: false,
      fontactive: onLoad,
      fontinactive: onError,
      active: onAllLoad,
      inactive: onAllError
    };

    if (provider === 'google') {
      var fontFamily = GoogleFont({
        family: family,
        weight: weight,
        italic: italic
      });
      WebFontConfig.google = {
        families: [fontFamily],
        text: text
      };
    } else if (provider === 'local') {
      WebFontConfig.custom = {
        families: [family]
      };
    }

    WebFont.load(WebFontConfig);
  }, [family, weight, italic, provider, onLoad, onError]);
  return null;
};

var GoogleFont = function GoogleFont(_ref2) {
  var family = _ref2.family,
      _ref2$weight = _ref2.weight,
      weight = _ref2$weight === void 0 ? 400 : _ref2$weight,
      _ref2$italic = _ref2.italic,
      italic = _ref2$italic === void 0 ? false : _ref2$italic;
  var encodedURL = encodeURIComponent(family);

  if (weight !== 400 && italic) {
    encodedURL += ":bi";
  } else if (weight !== 400) {
    encodedURL += ":" + weight;
  } else if (italic) {
    encodedURL += ":i";
  }

  return encodedURL;
};

var styleGen = function styleGen(_ref3) {
  var family = _ref3.family,
      italic = _ref3.italic,
      weight = _ref3.weight;
  return {
    fontFamily: "'" + family + "'",
    fontStyle: italic ? 'italic' : undefined,
    fontWeight: weight
  };
};

export default Font;
export { FontLoader, Text };
//# sourceMappingURL=index.modern.js.map
